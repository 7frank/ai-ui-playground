import { FunctionResponseSchema, TaskSchema } from "./types/taskFileSchema";
import {
  runImplementationTypescriptChecks,
  runTestTypescriptChecks,
} from "./source-test-validate";

/******************************** */
export type SupportedLang = "ts" | "py";
export type LangConfig = {
  /**
   * if defined it these checks will be run on the source code generated by the LLM.
   */
  sourceCodeChecksHandler?: ChecksFunction;

  /**
   * if defined it these checks will be run on the test code generated by the LLM.
   */
  testCodeChecksHandler?: ChecksFunction;

  /**
   * a command that will be used to run the generated test.
   */
  testCommand?: `${string}{filename}`;
};
type ChecksFunction = (data: FunctionResponseSchema) => void;
type LanguageConfigRecord = Partial<Record<SupportedLang, LangConfig>>;
export const languageConfigurations: LanguageConfigRecord = {
  ts: {
    sourceCodeChecksHandler: runImplementationTypescriptChecks,
    testCodeChecksHandler: runTestTypescriptChecks,
    testCommand:
      "bun test ./{filename}",
  },
};

export function getLanguageConfigFromTask(entry: TaskSchema) {
  return entry.ext
    ? languageConfigurations[entry.ext as SupportedLang]
    : undefined;
}
