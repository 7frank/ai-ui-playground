0th try with params {
  history: [],
  prompt: "create a function that 'queries the star wars api and returns a character by name'.\nInfer the language from the file extension: 'ts'.\nuse fetch.\nThe interface of the function looks the following 'async function getCharacterByName(name:String):Promise<StarWarsCharacterDetails>' \n",
}
info: 539 Token used
extracted function name: getCharacterByName
1th try with params {
  history: [
    {
      role: "user",
      content: "create a function that 'queries the star wars api and returns a character by name'.\nInfer the language from the file extension: 'ts'.\nuse fetch.\nThe interface of the function looks the following 'async function getCharacterByName(name:String):Promise<StarWarsCharacterDetails>' \n",
    },
    {
      role: "assistant",
      content: "\"import fetch from 'node-fetch';\\n\\ninterface StarWarsCharacterDetails {\\n  name: string;\\n  height: number;\\n  mass: number;\\n  hair_color: string;\\n  skin_color: string;\\n  eye_color: string;\\n  birth_year: string;\\n  gender: string;\\n}\\n\\nasync function getCharacterByName(name: string): Promise<StarWarsCharacterDetails> {\\n  const url = `https://swapi.dev/api/people/?search=${name}`;\\n\\n  const response = await fetch(url);\\n  const data = await response.json();\\n\\n  if (data.count === 0) {\\n    throw new Error(`Character not found: ${name}`);\\n  }\\n\\n  const character = data.results[0];\\n\\n  const characterDetails: StarWarsCharacterDetails = {\\n    name: character.name,\\n    height: parseInt(character.height),\\n    mass: parseInt(character.mass),\\n    hair_color: character.hair_color,\\n    skin_color: character.skin_color,\\n    eye_color: character.eye_color,\\n    birth_year: character.birth_year,\\n    gender: character.gender,\\n  };\\n\\n  return characterDetails;\\n}\"",
    }
  ],
  prompt: "There was an error in your previous response:The source code does not contain any exported function.",
}
info: 236 Token used
2th try with params {
  history: [
    {
      role: "user",
      content: "create a function that 'queries the star wars api and returns a character by name'.\nInfer the language from the file extension: 'ts'.\nuse fetch.\nThe interface of the function looks the following 'async function getCharacterByName(name:String):Promise<StarWarsCharacterDetails>' \n",
    },
    {
      role: "assistant",
      content: "\"import fetch from 'node-fetch';\\n\\ninterface StarWarsCharacterDetails {\\n  name: string;\\n  height: number;\\n  mass: number;\\n  hair_color: string;\\n  skin_color: string;\\n  eye_color: string;\\n  birth_year: string;\\n  gender: string;\\n}\\n\\nasync function getCharacterByName(name: string): Promise<StarWarsCharacterDetails> {\\n  const url = `https://swapi.dev/api/people/?search=${name}`;\\n\\n  const response = await fetch(url);\\n  const data = await response.json();\\n\\n  if (data.count === 0) {\\n    throw new Error(`Character not found: ${name}`);\\n  }\\n\\n  const character = data.results[0];\\n\\n  const characterDetails: StarWarsCharacterDetails = {\\n    name: character.name,\\n    height: parseInt(character.height),\\n    mass: parseInt(character.mass),\\n    hair_color: character.hair_color,\\n    skin_color: character.skin_color,\\n    eye_color: character.eye_color,\\n    birth_year: character.birth_year,\\n    gender: character.gender,\\n  };\\n\\n  return characterDetails;\\n}\"",
    },
    {
      role: "user",
      content: "There was an error in your previous response:The source code does not contain any exported function.",
    },
    {
      role: "assistant",
      content: "\"\"",
    }
  ],
  prompt: "There was an error in your previous response:'sourceCode' may not be empty",
}
info: 233 Token used
Success:
{
  "language": "Python",
  "packages": [],
  "sourceCode": ""
}
