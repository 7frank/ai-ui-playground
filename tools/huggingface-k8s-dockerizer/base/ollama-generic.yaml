apiVersion: apps/v1
kind: Deployment
metadata:
  name: ollama-application
spec:
  selector:
    matchLabels:
      app: ollama-application
  replicas: 1 # 
  template:
    metadata:
      labels:
        app: ollama-application
    spec:
      containers:
      - name: ollama-application
        image: frank1147/ollama-gpu
        ports:
        - name: http
          containerPort: 11434     
        # volumeMounts:
        # - mountPath: /dev/shm
        #   name: dshm    
        
        # TODO aquire permissions to create PV
        #   volumeMounts:
        #   - mountPath: "/root/.ollama/models"
        #     name: ollama-models-volume
        # TODO aquire permissions to create PV
        # volumes:
        # - name: ollama-models-volume
        #   persistentVolumeClaim:
        #     claimName: ollama-models-pvc



        resources:                                          # Es muss die GPU ressource angefordert werden.
          limits:                                           #
          #  nvidia.com/gpu: 1  
            cpu: "2"
            memory: "32Gi"
          requests:
          #  nvidia.com/gpu: 1 
            cpu: "2"
            memory: "32Gi"                             # Anzahl der GPU slices
        imagePullPolicy: IfNotPresent
        readinessProbe:
          httpGet:
            path: /api/tags
            port: 8080
          initialDelaySeconds: 100
          periodSeconds: 5
      
      imagePullSecrets:
      - name: docker.registery.secret
      # tolerations:                                          # Diese toleration muss gesetzt werden
      #   - key: "nvidia.com/gpu"                               #
      #     operator: "Exists"                                  #
      #     effect: "NoSchedule"
      # The secret data is exposed to Containers in the Pod through a Volume.
      # volumes:
      #   - name: dshm
      #     persistentVolumeClaim:
      #       claimName: dshm
---
apiVersion: v1
kind: Service
metadata:
  name: ollama-application
spec:
  type: ClusterIP
  selector:
    app: ollama-application
  ports:
  - name: http
    port: 8080
    targetPort: 11434
  sessionAffinity: ClientIP
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: ollama-application-ingress
  annotations:
    nginx.ingress.kubernetes.io/affinity: "cookie"
    nginx.ingress.kubernetes.io/affinity-mode: persistent
    nginx.ingress.kubernetes.io/use-regex: "true"
spec:
  ingressClassName: internal-nginx
  tls:
  - hosts:  
    - ollama-application-7frank.internal.jambit.io
  rules:
    - host: ollama-application-7frank.internal.jambit.io
      http:
        paths:
        - pathType: Prefix
          path: "/"
          backend:
            service:
              name: ollama-application
              port:
                name: "http"
